<?xml version="1.0"?>
<preface xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="intro">
  <info>
    <title>Вступление</title>
  </info>
  <section xml:id="welcome">
    <info>
      <title>Добро пожаловать!</title>
    </info>
    <para>Добро пожаловать в Computer Science from the Bottom Up</para>
    <section>
      <info>
        <title>Философия</title>
      </info>
      <para>Вкратце, то, что вы читаете предназначено для **shop**-класс
      Computer Science. Молодые студенты в Computer Science умеют управлять
      компьютером, но с чего им начать, чтобы узнать что скрыто "под
      капотом"? Попытка понять операционную систему, к сожалению, 
      не так проста как открытие капота. На данный момент ядро Linux
      состоит из миллионов строк кода, добавьте к этому другие критические 
      части современное операционной системы, такие как компилятор, ассемблер,
      системные библиотеки и ваш код уже трудно представить. Добавьте к этому
      университетский курс предмета операционных систем, несколько хороших
      справочных руководств, два или три года опыта с языком С и, 
      может только тогда, вы лишь <emphasis>немного приблизитесь</emphasis>
      к тому, чтобы понять что к чему.
      </para>
      <para>To keep with the car analogy, the prospective student is
      starting out trying to work on a Formula One engine without ever
      knowing how a two stroke motor operates.  During their shop
      class the student should pull apart, twist, turn and put back
      together that two stroke motor, and consequentially have a pretty
      good framework for understanding just how the Formula One engine
      works.  Nobody will expect them to be a Formula One engineer,
      but they are well on their way!</para>
    </section>
    <section>
      <info>
        <title>Why <emphasis>from the bottom up</emphasis>?</title>
      </info>
      <para>Not everyone wants to attend shop class.  Most people only
      want to drive the car, not know how to build one from scratch.
      Obviously any general computing curriculum has to take this into
      account else it won't be relevant to its students.  So computer
      science is taught from the "top down"; applications, high level
      programming, software design and development theory, possibly
      data structures.  Students will probably be exposed to binary,
      hopefully binary logic, possibly even some low level concepts
      such as registers, opcodes and the like at a superficial
      level.</para>
      <para>This book aims to move in completely the opposite
      direction, working from operating systems fundamentals through
      to how those applications are complied and executed.  </para>
    </section>
    <section>
      <info>
        <title>Enabling technologies</title>
      </info>
      <para>This book is only possible thanks to the development of
      <glossterm linkend="opensource">Open Source</glossterm>
      technologies.  Before Linux it was like taking a shop course
      with a car that had it's bonnet welded shut; today we are in a
      position to open that bonnet, poke around with the insides and,
      better still, take that engine and use it to do whatever we
      want.</para>
    </section>
  </section>
</preface>
