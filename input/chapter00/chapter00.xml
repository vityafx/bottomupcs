<?xml version="1.0"?>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:id="chapter00">
  <info>
    <title>Общий Unix и современный C</title>
  </info>
  <section xml:id="everything_is_a_file">
    <info>
      <title>
        <emphasis>Все есть файл!</emphasis>
      </title>
    </info>
    <para>Часто цитируемая доктрина UNIX-похожих систем, таких как Linux или BSD
    это <emphasis>все есть файл</emphasis>.</para>
    <para>Представьте, что файл это слово в текстовом процессоре (Microsoft Word).
    В данном случае нам доступны две базовых операции, которые мы можем выполнить
    с таким файлом:</para>
    <orderedlist>
      <listitem>
        <para>Чтение (текст, который мы видим в текстовом процессоре).</para>
      </listitem>
      <listitem>
        <para>Запись (новая информация от пользователя).</para>
      </listitem>
    </orderedlist>
    <para>Давайте представим несколько устройств, подключенных к компьютеру,
    и выясним, как к ним относятся базовые файловые операции:</para>
    <orderedlist>
      <listitem>
        <para>Экран</para>
      </listitem>
      <listitem>
        <para>Клавиатура</para>
      </listitem>
      <listitem>
        <para>Принтер</para>
      </listitem>
      <listitem>
        <para>Дисковод CDROM</para>
      </listitem>
    </orderedlist>
    <para>Экран и принтер являются файлами, поддерживающими только операции записи,
    но вместо того, чтобы быть сохраненными на диске как последовательность битов,
    информация отображается точками на экране или линиями на странице. Клавиатура
    это файл, поддерживающий только операцию чтения, информация в который поступает
    с нажатием клавиш пользователем. The CDROM is similar, but rather than
    randomly coming from the user the data is stored directly on the
    disk.</para>
    <para>Концепция "все есть файл" - это хорошая
    <emphasis>абстракция</emphasis> источника и приемника данных.
    Кроме того, это отличная абстракция для всех устройств, которые могут быть подключены
    к компьютеру. Понимание великой мощи UNIX помогает понять всю платформу целиком.
    Предоставление абстракций "железа" программисту является одной из основных целей ОС.
    </para>
    <para>It is probably not too much of a stretch to say abstraction
    is <emphasis>the</emphasis> primary concept that underpins all
    modern computing. Не каждый человек может знать все, начиная om
    построения современного пользовательского интерфейса и заканчивая
    внутренним устройством центрального процессора, еще меньше умеют
    делать это все сами. Для программистов, абстракция являются
    <emphasis>lingua franca</emphasis>, который позволяет нам изобретать.
    </para>
    <para>Осознание абстракций дает важное понимание того, как
        <emphasis>использовать</emphasis> их наиболее правильно.
        В этой книге мы затрагиваем абстракции на низком уровне: между
        программами и операционной системой и между операционной системой
        и "железом". Выше находятся другие уровни абстракции, каждая из
        которых заслуживает отдельной книги. По мере чтения книги Вы, мы надеемся,
        начнете вникать в то, как абстракции представлены современной ОС.
      </para>
    <figure>
      <info>
        <title>Абстракция</title>
      </info>
      <mediaobject>
        <imageobject>
          <imagedata fileref="chapter00/figures/abstraction.eps" format="EPS"/>
        </imageobject>
        <imageobject role="fo">
          <imagedata fileref="figures/abstraction.svg" format="SVG" scalefit="1" width="100%" contentdepth="100%"/>
        </imageobject>
        <imageobject role="html">
          <imagedata fileref="chapter00/figures/abstraction.png" format="PNG"/>
        </imageobject>
        <textobject>
          <phrase>Можете ли вы увидеть разницу между CDROM и клавиатурой? Как прикладной разработчик, вы не должны.</phrase>
        </textobject>
      </mediaobject>
    </figure>
  </section>
  <section xml:id="abstration">
    <info>
      <title>Реализация абстракций</title>
    </info>
    <para>В общем случае, абстракции реализованы тем, что называется
        <emphasis>Прикладным Интерфейсом Программирования</emphasis> (API). 
        API - это расплывчатый термин, обозначающий множество различных вещей в разных
        контекстах программирования. Fundamentally, a programmer designs a set of functions
    and documents their interface and functionality with the principle
    that the actual implementation providing the API is opaque.</para>
    <para>For example, many large web-applications provide an API
      accessible via HTTP.  Accessing data via this method surely
      triggers many complicated series of remote-procedure calls,
      database queries and data transfer; all of which is opaque to
      the end user who simply receives the contracted data.</para>
    <para>Those familiar with <emphasis>object-oriented</emphasis>
      languages such as Java, Python or C++ would be familiar with the
      abstraction provided by <emphasis>classes</emphasis>.  Methods
      provide the interface to the class, but abstract the
      implementation.</para>
    <section>
      <info>
        <title>Implementing abstraction with C</title>
      </info>
      <para>A common method used in the Linux Kernel and other large C
      code bases, which lacks a built-in concept of
      object-orientation, is <emphasis>function pointers</emphasis>.
      Learning to read this idiom is key to navigating most large C
      code-bases.  By understanding how to read the abstractions
      provided within the code an understanding of internal API
      designs can be built.</para>
      <example xml:id="abstraction-code">
        <info>
          <title>Abstraction with function pointers</title>
        </info>
        <programlisting language="c">
          <xi:include href="code/abstraction.c" parse="text"/>
        </programlisting>
      </example>
      <para>Code such as the above is the simplest example of
    constructs used repeatedly through the Linux Kernel and other C
    programs.  Lets have a look at some specific elements.</para>
      <para>We start out with a structure that defines the API
    (<computeroutput>struct greet_api</computeroutput>).  The
    functions whose names are encased in parenthesis with a pointer
    marker describe a <emphasis>function
    pointer</emphasis><footnote><para>Often you will see that the
    names of the parameters are omitted, and only the type of the
    parameter is specified.  This allows the implementer to specify
    their own parameter names avoiding warnings from the
    compiler.</para></footnote>.  The function pointer describes the
    <emphasis>prototype</emphasis> of function it must point to;
    pointing it at a function without the correct return type or
    parameters will generate a compiler warning at least; if left in
    code will likely lead to incorrect operation or crashes.</para>
      <para>We then have our implementation of the API.  Often for
    more complex functionality you will see an idiom where API
    implementation functions will only be a wrapper around another
    function that is conventionally prepended with one or or two
    underscores<footnote><para>A double-underscore function
    <computeroutput>__foo</computeroutput> may conversationally be
    referred to as "dunder foo".</para></footnote>
    (i.e. <computeroutput>say_hello_fn()</computeroutput> would call
    another function
    <computeroutput>_say_hello_function()</computeroutput>).  This has
    several uses; generally it relates to having simpler and smaller
    parts of the API (marshalling or checking arguments, for example)
    separate to more complex implementation, which often eases the path
    to significant changes in the internal workings whilst ensuring
    the API remains constant.  Our implementation is very simple
    however, and doesn't even need it's own support functions.  In
    various projects, single, double or even triple underscore
    function prefixes will mean different things, but universally it
    is a visual warning that the function is not supposed to be called
    directly from "beyond" the API.</para>
      <para>Second to last, we fill out the function pointers in
    <computeroutput>struct greet_api greet_api</computeroutput>.  The
    name of the function is a pointer, therefore there is no need to
    take the address of the function
    (i.e. <computeroutput>&amp;say_hello_fn</computeroutput>).</para>
      <para>Finally we can call the API functions through the
    structure in <computeroutput>main</computeroutput>.</para>
      <para>You will see this idiom constantly when navigating the
        source code.  The tiny example below is taken from
        <computeroutput>include/linux/virtio.h</computeroutput> in the
        Linux kernel source to illustrate:</para>
      <example xml:id="virtio-abstraction">
        <info>
          <title>Abstraction in
	<computeroutput>include/linux/virtio.h</computeroutput></title>
        </info>
        <programlisting language="c">
          <xi:include href="code/virtio.h" parse="text"/>
        </programlisting>
      </example>
      <para> It's only necessary to vaguely understand that this
        structure is a description of a virtual I/O device.  We can
        see the user of this API (the device driver author) is
        expected to provide a number of functions that will be called
        under various conditions during system operation (when probing
        for new hardware, when hardware is removed, etc).  It also
        contains a range of data; structures which should be filled
        with relevant data.</para>
      <para>Starting with descriptors like this is usually the easiest
      way into understanding the various layers of kernel code.</para>
    </section>
    <section>
      <info>
        <title>Libraries</title>
      </info>
      <para>Libraries have two roles which illustrate
	abstraction.</para>
      <itemizedlist>
        <listitem>
          <para>Allow programmers to reuse commonly accessed code.</para>
        </listitem>
        <listitem>
          <para>Act as a <emphasis>black box</emphasis> implementing
	    functionality for the programmer.</para>
        </listitem>
      </itemizedlist>
      <para>For example, a library implementing access to the raw data
        in JPEG files has both the advantage that the many programs
        who wish to access image files can all use the same library
        and the programmers building these programs do not need to
        worry about the exact details of the JPEG file format, but can
        concentrate their efforts on what their program wants to do
        with the image.</para>
      <para>The standard library of a UNIX platform is generically
        referred to as <computeroutput>libc</computeroutput>.  It
        provides the basic interface to the system: fundamental calls
        such as <computeroutput>read()</computeroutput>,
        <computeroutput>write()</computeroutput> and
        <computeroutput>printf()</computeroutput>.  This API is
        described in its entirety by a specification called
        <computeroutput>POSIX</computeroutput>.  It is freely
        available online and describes the many calls that make up the
        standard UNIX API.</para>
      <para>Most UNIX platforms broadly follow the POSIX standard,
      though often differ small but sometimes important ways (hence
      the complexity of the various GNU autotools, which often tries
      to abstract away these differences for you).  Linux has many
      interfaces that are not specified by POSIX; writing applications
      that use them exclusively will make your application less
      portable.</para>
      <para>Libraries are a fundamental abstraction with many details.
      Later chapters will describe how libraries work in much greater
      detail.</para>
    </section>
  </section>
  <section xml:id="file_descriptors">
    <info>
      <title>File Descriptors</title>
    </info>
    <para>One of the first things a UNIX programmer learns is that
    every running program starts with three files already
    opened:</para>
    <table>
      <info>
        <title>Standard Files Provided by Unix</title>
      </info>
      <tgroup cols="3">
        <thead>
          <row>
            <entry>Descriptive Name</entry>
            <entry>File Number</entry>
            <entry>Description</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>Standard In</entry>
            <entry>0</entry>
            <entry>Input from the keyboard</entry>
          </row>
          <row>
            <entry>Standard Out</entry>
            <entry>1</entry>
            <entry>Output to the console</entry>
          </row>
          <row>
            <entry>Standard Error</entry>
            <entry>2</entry>
            <entry>Error output to the console</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <figure>
      <info>
        <title>Default Unix Files</title>
      </info>
      <mediaobject>
        <imageobject>
          <imagedata fileref="chapter00/figures/stdfds.eps" format="EPS"/>
        </imageobject>
        <imageobject role="fo">
          <imagedata fileref="figures/stdfds.svg" format="SVG" scalefit="1" width="100%" contentdepth="100%"/>
        </imageobject>
        <imageobject role="html">
          <imagedata fileref="chapter00/figures/stdfds.png" format="PNG"/>
        </imageobject>
        <textobject>
          <phrase>The standard files opened with any UNIX program.</phrase>
        </textobject>
      </mediaobject>
    </figure>
    <para>This raises the question what an <emphasis>open
        file</emphasis> represents.  The value returned by an
        <computeroutput>open</computeroutput> call is termed a
        <emphasis>file descriptor</emphasis> and is essentially an
        index into an array of open files kept by the kernel.</para>
    <figure xml:id="fd_abstraction">
      <info>
        <title>Abstraction</title>
      </info>
      <mediaobject>
        <imageobject>
          <imagedata fileref="chapter00/figures/file-descriptors.eps" format="EPS"/>
        </imageobject>
        <imageobject role="fo">
          <imagedata fileref="figures/file-descriptors.svg" format="SVG" scalefit="1" width="100%" contentdepth="100%"/>
        </imageobject>
        <imageobject role="html">
          <imagedata fileref="chapter00/figures/file-descriptors.png" format="PNG"/>
        </imageobject>
        <textobject>
          <phrase>File descriptors associate the abstraction provided
	  by device-drivers with a file interface provided to a user.</phrase>
        </textobject>
      </mediaobject>
      <caption>
        <para>File descriptors are an index into a
      file-descriptor table stored by the kernel.  The kernel
        creates a file-descriptor in response to an
        <computeroutput>open</computeroutput> call and associates the
        file-descriptor with some abstraction of an underlying
        file-like object; be that an actual hardware device, or a
        file-system or something else entirely.  Consequently a
        processes <computeroutput>read</computeroutput> or
        <computeroutput>write</computeroutput> calls that reference
        that file-descriptor are routed to the correct place by the
      kernel to ultimately do something useful.</para>
      </caption>
    </figure>
    <para>In short, the file-descriptor is the gateway into the
    kernel's abstractions of underlying hardware.  An overall view of
    the abstraction for physical-devices is shown in <xref linkend="fd_abstraction"/>.</para>
    <para>Starting at the lowest level, the operating system requires
    a programmer to create a <emphasis>device-driver</emphasis> to be
    able to communicate with a hardware device.  This device-driver is
    written to an API provided by the kernel just like in <xref linkend="virtio-abstraction"/>; the device-driver will provide a
    range of functions which are called by the kernel in response to
    various requirements.  In the simplified example above, we can see
    the drivers provide a <computeroutput>read</computeroutput> and
    <computeroutput>write</computeroutput> function that will be
    called in response to the analogous operations on the
    file-descriptor. The device-driver knows how to convert these
    generic requests into specific requests or commands for a
    particular device.</para>
    <para>To provide the abstraction to user-space, the kernel
      provides a file-interface via what is generically termed a
      <emphasis>device layer</emphasis>.  Physical devices on the host
      are represented by a file in a special file-system such as
      <computeroutput>/dev</computeroutput>.  In UNIX-like systems, so
      called <emphasis>device-nodes</emphasis> have what are termed a
      <emphasis>major</emphasis> and a <emphasis>minor</emphasis>
      number which allows the kernel to associate particular nodes
      with their underlying driver.  These can be identified via
      <computeroutput>ls</computeroutput> as illustrated in <xref linkend="major-minor-numbers"/>.</para>
    <example xml:id="major-minor-numbers">
      <info>
        <title>Example of major and minor numbers</title>
      </info>
      <programlisting>
        <xi:include href="code/major-minor.txt" parse="text"/>
      </programlisting>
    </example>
    <para>This brings us to the file-descriptor, which is the handle
    user-space uses to talk to the underlying device.  In a
    broad-sense, what happens when a file is
    <computeroutput>open</computeroutput>ed is that the kernel is
    using the path information to map the file-descriptor with
    something that provides an appropriate
    <computeroutput>read</computeroutput> and
    <computeroutput>write</computeroutput>, etc. API.  When this
    <computeroutput>open</computeroutput> is for a device
    (<computeroutput>/dev/sr0</computeroutput> above), the major and
    minor number of the opened device-node provides the information
    the kernel needs to find the correct device-driver and complete
    the mapping.  The kernel will then know how to route further calls
    such as <computeroutput>read</computeroutput> to the underlying
    functions provided by the device-driver.</para>
    <para>A non-device file operates similarly, although there are
      more layers in-between.  The abstraction here is the
      <emphasis>mount-point</emphasis>; mounting a file-system has the
      dual purpose of setting up a mapping so the file-system knows
      the underlying device that provides the storage and the kernel
      knows that files opened under that mount-point should be
      directed to the file-system driver.  Like device-drivers,
      file-systems are written to a particular generic file-system API
      provided by the kernel.
    </para>
    <para>There are indeed many other layers that complicate the
    picture in real-life.  For example, the kernel will go to great
    efforts to cache as much data from disks as possible in otherwise
    free-memory; this provides many speed advantages.  It will also
    try to organise device access in the most efficient ways possible;
    for example trying to order disk-access to ensure data stored
    physically close to each other is retrieved together, even if the
    requests did not arrive in such an order.  Further, many devices
    are of a more generic class such as USB or SCSI devices which
    provide their own abstraction layers to write too.  Thus rather
    than writing directly to devices, file-systems will go through
    these many layers.  Understanding the kernel is to understand how
    these many APIs interrelate and coexist.</para>
    <section>
      <info>
        <title>The Shell</title>
      </info>
      <para>The shell is the gateway to interacting with the operating
        system.  Be it <computeroutput>bash</computeroutput>,
        <computeroutput>zsh</computeroutput>,
        <computeroutput>csh</computeroutput> or any of the many other
        shells, they all fundamentally have only one major task &#x2014; to
        allow you to execute programs (you will begin to understand
        how the shell actually does this when we talk about some of
        the internals of the operating system later).</para>
      <para>But shells do much more than allow you to simply execute a
      program.  They have powerful abilities to redirect files, allow
      you to execute multiple programs simultaneously and script
      complete programs.  These all come back to the
      <emphasis>everything is a file</emphasis> idiom.</para>
      <section>
        <info>
          <title>Redirection</title>
        </info>
        <para>Often we do not want the
        standard file descriptors mentioned in <xref linkend="file_descriptors"/> to point to their default places.
        For example, you may wish to capture all the output of a
        program into a file on disk, or, alternatively have it read
        its commands from a file you prepared earlier.  Another useful
        task might like to pass the output of one program to the input
        of another.  With the operating system, the shell facilitates
        all this and more.</para>
        <table>
          <info>
            <title>Standard Shell Redirection Facilities</title>
          </info>
          <tgroup cols="4">
            <thead>
              <row>
                <entry>Name</entry>
                <entry>Command</entry>
                <entry>Description</entry>
                <entry>Example</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>Redirect to a file</entry>
                <entry>
                  <computeroutput>&gt; filename</computeroutput>
                </entry>
                <entry>Take all output from standard out and place it into
	    <computeroutput>filename</computeroutput>.  Note using
	    <computeroutput>&gt;&gt;</computeroutput> will append to
	    the file, rather than overwrite it.</entry>
                <entry>
                  <computeroutput>ls &gt; filename</computeroutput>
                </entry>
              </row>
              <row>
                <entry>Read from a file</entry>
                <entry>&lt; <computeroutput>filename</computeroutput></entry>
                <entry>Copy all data from the file to the standard input of the program</entry>
                <entry>
                  <computeroutput>echo &lt; filename</computeroutput>
                </entry>
              </row>
              <row>
                <entry>Pipe</entry>
                <entry>
                  <computeroutput>program1 | program2</computeroutput>
                </entry>
                <entry>Take everything from standard out of
	    <computeroutput>program1</computeroutput> and pass it to
	    standard input of
	    <computeroutput>program2</computeroutput></entry>
                <entry>
                  <computeroutput>ls | more</computeroutput>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </section>
      <section>
        <info>
          <title>Implementing
        <computeroutput>pipe</computeroutput></title>
        </info>
        <para>The implementation of <computeroutput>ls |
        more</computeroutput> is just another example of the power of
        abstraction.  What fundamentally happens here is that instead
        of associating the file-descriptor for the standard-output
        with some sort of underlying device (such as the console, for
        output to the terminal), the descriptor is pointed to an
        in-memory buffer provided by the kernel commonly termed a
        <computeroutput>pipe</computeroutput>.  The trick here is that
        another process can associate its standard
        <emphasis>input</emphasis> with the other-side of this same
        buffer and effectively consume the output of the other
        process.  This is illustrated in <xref linkend="process_pipe"/></para>
        <figure xml:id="process_pipe">
          <info>
            <title>A pipe in action</title>
          </info>
          <mediaobject>
            <imageobject>
              <imagedata fileref="chapter00/figures/pipe.eps" format="EPS"/>
            </imageobject>
            <imageobject role="fo">
              <imagedata fileref="figures/pipe.svg" format="SVG" scalefit="1" width="100%" contentdepth="100%"/>
            </imageobject>
            <imageobject role="html">
              <imagedata fileref="chapter00/figures/pipe.png" format="PNG"/>
            </imageobject>
            <textobject>
              <phrase>The pipe is an in-memory buffer provided by the
	  kernel which allows the output of one process to be consumed
	  as the input to another.</phrase>
            </textobject>
          </mediaobject>
          <caption>
            <para>The pipe is an in-memory buffer that
      connects two processes together.  File-descriptors point
      to the pipe object, which buffers data sent to it (via a
      <computeroutput>write</computeroutput>) to be
      <emphasis>drained</emphasis> (via a
      <computeroutput>read</computeroutput>)</para>
          </caption>
        </figure>
        <para>Writes to the pipe are stored by the kernel until a
          corresponding read from the other side
          <emphasis>drains</emphasis> the buffer.  This is a very
          powerful concept and is one of the fundamental forms of
          <emphasis>inter-process communication</emphasis> or IPC in
          UNIX like operating systems.  The pipe allows more than just
          a data transfer; it can act as a signaling channel.  If a
          process <computeroutput>read</computeroutput>s an empty
          pipe, it will by default <emphasis>block</emphasis> or be
          put into hibernation until there is some data available
          (this is discussed in much greater depth in <xref linkend="chapter04"/>.  Thus two processes may use a pipe to
          communicate that some action has been taken just by writing
          a byte of data; rather than the actual data being important,
          the mere presence of <emphasis>any</emphasis> data in the
          pipe can signal a message.  Say for example one process
          requests that another print a file - something that will
          take some time.  The two processes may setup a pipe between
          themselves where the requesting process does a
          <computeroutput>read</computeroutput> on the empty pipe;
          being empty that call blocks and the process does not
          continue.  Once the print is done, the other process can
          write a message into the pipe, which effectively wakes up
          the requesting process and signals the work is done.</para>
        <para>Allowing processes to pass
          data between each other like this springs another common
          UNIX idiom of small tools doing one particular thing.
          Chaining these small tools gives a flexibility that a single
          monolithic tool often can not.</para>
      </section>
    </section>
  </section>
</chapter>
